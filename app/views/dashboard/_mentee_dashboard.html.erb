<div class="grid grid-col-1 sm:grid-cols-4 gap-5 py-9 px-24 max-w-[100%]">
  <!-- Left Section: Stack the two cards -->
  <div class="flex flex-col space-y-5 col-span-1">
    <%= render partial: 'user_card' %>
    <%= render partial: 'program_card' %>
  </div>
  <!-- Right Section: Main Content -->
  <% if @shortlist_time == 'closed' %>
    <div class="col-span-3">
  <% else %>
    <div class="col-span-2">
  <% end %>
    <h1 class="text-2xl font-semibold text-[#202020] mb-1">
      Available Mentors
    </h1>
    <p class="text-sm text-[#898989] mb-5">
      Discover insights and stories from our mentors to inspire your own journey.
    </p>
    <!-- Grid of mentors -->
    <% if @shortlist_time == 'closed' %>
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-3 max-w-[55rem] rounded-[0.55rem] place-content-center">
    <% else %>
      <div id="mentor-list-section"  class="grid grid-cols-1 sm:grid-cols-2 gap-3 max-w-[55rem] rounded-[0.55rem] place-content-center">
      
    <% end %>
      <% available_mentors_count = 0 %>
      <% mentors_data.each do |mentor| %>
      <%# TODO: Refactor section below (might need to modify user methods in model or create new scope) %>
        <% current_mentee_count = mentor.mentee_capacity_count(mentor.cohort.id) %>
        <% capacity_cap = mentor.capacity %>
        <% if current_user.cohort.running? && current_mentee_count < capacity_cap %>
          <%= render 'profile_card', mentor: mentor %>
          <% available_mentors_count += 1 %>
        <% end %>
      <% end %>
      <!-- If no available mentors -->
      <% if !current_user.cohort.running? %>
        <h2> Mentor matching is closed for cohort <%= current_user.cohort.id %> </h2>
      <% elsif available_mentors_count == 0 %>
        <h2> No more available mentors in cohort <%= current_user.cohort.id %> </h2>
      <% end %>
    </div>
  </div>
  <% if @shortlist_time == 'open' %>
    <div class="col-span-1">
      <%= render partial: 'shortlist_card' %>
    </div>
  <% end %>
</div>

<script>
  const currentUser = <%= current_user.id %>

  document.addEventListener("DOMContentLoaded", function () {
    const containers = [
      document.getElementById("mentor-list-section"),
      document.getElementById("short-list-card"),
    ];

    const drake = dragula(containers, {
      moves: function (el, container, handle) {
          return true;
      },
    });

    drake.on("drop", function (el, target, source, sibling) {
      var container = el.parentNode;
      var children = Array.from(container.children);

      console.log("Dropped:", el);
      console.log("New Parent:", target);

      if (container.id === 'short-list-card') {
        const shortlist = children.map((item, index) => {
          var childId = item.id; 
          var idNumber = Number(childId.split('-').pop()); 
          var itemIndex = index + 1;
          return {
            [itemIndex] : [idNumber, 'nil']
          };
        });
        console.log('shortlist:', JSON.stringify(shortlist));
        console.log('user:', currentUser);
        //updateUserShortlist(currentUser, shortlist);
      } else {
        console.log('Moved to Mentor list Conatiner');
      }
    });

    // function updateUserShortlist(userId, shortlist) {
    // fetch(`/api/users/${userId}`, {  // Adjust the URL to your server endpoint
    //     method: 'PUT',  // Use PATCH if you want to only update specific fields
    //     headers: {
    //         'Content-Type': 'application/json',
    //     },
    //     body: JSON.stringify({ shortlist }),  // Send the shortlist array
    // })
    // .then(response => {
    //     if (!response.ok) {
    //         throw new Error('Network response was not ok');
    //     }
    //     return response.json();
    // })
    // .then(data => {
    //     console.log('Success:', data);
    // })
    // .catch((error) => {
    //     console.error('Error:', error);
    // });
// }
  });
</script>